% Encoding: windows-1252

@Article{Lattner2020,
  author      = {Chris Lattner and Mehdi Amini and Uday Bondhugula and Albert Cohen and Andy Davis and Jacques Pienaar and River Riddle and Tatiana Shpeisman and Nicolas Vasilache and Oleksandr Zinenko},
  title       = {MLIR: A Compiler Infrastructure for the End of Moore's Law},
  abstract    = {This work presents MLIR, a novel approach to building reusable and extensible compiler infrastructure. MLIR aims to address software fragmentation, improve compilation for heterogeneous hardware, significantly reduce the cost of building domain specific compilers, and aid in connecting existing compilers together. MLIR facilitates the design and implementation of code generators, translators and optimizers at different levels of abstraction and also across application domains, hardware targets and execution environments. The contribution of this work includes (1) discussion of MLIR as a research artifact, built for extension and evolution, and identifying the challenges and opportunities posed by this novel design point in design, semantics, optimization specification, system, and engineering. (2) evaluation of MLIR as a generalized infrastructure that reduces the cost of building compilers-describing diverse use-cases to show research and educational opportunities for future programming languages, compilers, execution environments, and computer architecture. The paper also presents the rationale for MLIR, its original design principles, structures and semantics.},
  date        = {2020-02-25},
  eprint      = {2002.11054v2},
  eprintclass = {cs.PL},
  eprinttype  = {arXiv},
  file        = {:http\://arxiv.org/pdf/2002.11054v2:PDF},
  groups      = {IR},
  keywords    = {cs.PL, cs.LG},
}

@Article{Ashenden1994,
  author = {Peter J. Ashenden and Henry Detmold and Wayne S. McKeen},
  title  = {Execution of VHDL Models Using Parallel Discrete Event Simulation Algorithms},
  year   = {1994},
  issn   = {1065-514X},
  pages  = {1-16},
  volume = {2},
  doi    = {10.1155/1994/86178},
  groups = {Simulation},
}

@Article{Schuiki2020,
  author      = {Fabian Schuiki and Andreas Kurth and Tobias Grosser and Luca Benini},
  title       = {LLHD: A Multi-level Intermediate Representation for Hardware Description Languages},
  abstract    = {Modern Hardware Description Languages (HDLs) such as SystemVerilog or VHDL are, due to their sheer complexity, insufficient to transport designs through modern circuit design flows. Instead, each design automation tool lowers HDLs to its own Intermediate Representation (IR). These tools are monolithic and mostly proprietary, disagree in their implementation of HDLs, and while many redundant IRs exists, no IR today can be used through the entire circuit design flow. To solve this problem, we propose the LLHD multi-level IR. LLHD is designed as simple, unambiguous reference description of a digital circuit, yet fully captures existing HDLs. We show this with our reference compiler on designs as complex as full CPU cores. LLHD comes with lowering passes to a hardware-near structural IR, which readily integrates with existing tools. LLHD establishes the basis for innovation in HDLs and tools without redundant compilers or disjoint IRs. For instance, we implement an LLHD simulator that runs up to 2.4x faster than commercial simulators but produces equivalent, cycle-accurate results. An initial vertically-integrated research prototype is capable of representing all levels of the IR, implements lowering from the behavioural to the structural IR, and covers a sufficient subset of SystemVerilog to support a full CPU design.},
  date        = {2020-04-07},
  eprint      = {2004.03494v1},
  eprintclass = {cs.PL},
  eprinttype  = {arXiv},
  file        = {:http\://arxiv.org/pdf/2004.03494v1:PDF},
  groups      = {IR},
  keywords    = {cs.PL},
}

@InProceedings{lattner.llvm,
  author    = {C. {Lattner} and V. {Adve}},
  booktitle = {International Symposium on Code Generation and Optimization, 2004. CGO 2004.},
  title     = {LLVM: a compilation framework for lifelong program analysis transformation},
  year      = {2004},
  pages     = {75-86},
}

@Article{Cytron1991,
  author = {Ron Cytron and Jeanne Ferrante and Barry K. Rosen and Mark N. Wegman and F. Kenneth Zadeck},
  title  = {Efficiently computing static single assignment form and the control dependence graph},
  year   = {1991},
  issn   = {0164-0925},
  pages  = {451-490},
  volume = {13},
  doi    = {10.1145/115372.115320},
}

@Misc{Alpern1988,
  author = {B. Alpern and M. N. Wegman and F. K. Zadeck},
  title  = {Detecting equality of variables in programs},
  year   = {1988},
  doi    = {10.1145/73560.73561},
}

@Misc{Cytron1989,
  author = {R. Cytron and J. Ferrante and B. K. Rosen and M. N. Wegman and F. K. Zadeck},
  title  = {An efficient method of computing static single assignment form},
  year   = {1989},
  doi    = {10.1145/75277.75280},
}

@InProceedings{Kumar1998,
  author    = {R. {Kumar}},
  booktitle = {Wescon/98. Conference Proceedings (Cat. No.98CH36265)},
  title     = {Formal verification of hardware: misconception and reality},
  year      = {1998},
  pages     = {135-138},
  groups    = {Simulation},
}

@InProceedings{YuanLu2001,
  author    = {{Yuan Lu} and {Weimin Li}},
  booktitle = {ASICON 2001. 2001 4th International Conference on ASIC Proceedings (Cat. No.01TH8549)},
  title     = {A semi-formal verification methodology},
  year      = {2001},
  pages     = {33-37},
  groups    = {Simulation},
}

@Article{Zaruba2020,
  author      = {Florian Zaruba and Fabian Schuiki and Torsten Hoefler and Luca Benini},
  title       = {Snitch: A 10 kGE Pseudo Dual-Issue Processor for Area and Energy Efficient Execution of Floating-Point Intensive Workloads},
  abstract    = {Data-parallel applications, such as data analytics, machine learning, and scientific computing, are placing an ever-growing demand on floating-point operations per second on emerging systems. With increasing integration density, the quest for energy efficiency becomes the number one design concern. While dedicated accelerators provide high energy efficiency, they are over-specialized and hard to adjust to algorithmic changes. We propose an architectural concept that tackles the issues of achieving extreme energy efficiency while still maintaining high flexibility as a general-purpose compute engine. The key idea is to pair a tiny 10kGE control core, called Snitch, with a double-precision FPU to adjust the compute to control ratio. While traditionally minimizing non-FPU area and achieving high floating-point utilization has been a trade-off, with Snitch, we achieve them both, by enhancing the ISA with two minimally intrusive extensions: stream semantic registers (SSR) and a floating-point repetition instruction (FREP). SSRs allow the core to implicitly encode load/store instructions as register reads/writes, eliding many explicit memory instructions. The FREP extension decouples the floating-point and integer pipeline by sequencing instructions from a micro-loop buffer. These ISA extensions significantly reduce the pressure on the core and free it up for other tasks, making Snitch and FPU effectively dual-issue at a minimal incremental cost of 3.2%. The two low overhead ISA extensions make Snitch more flexible than a contemporary vector processor lane, achieving a $2\times$ energy-efficiency improvement. We have evaluated the proposed core and ISA extensions on an octa-core cluster in 22nm technology. We achieve more than $5\times$ multi-core speed-up and a $3.5\times$ gain in energy efficiency on several parallel microkernels.},
  date        = {2020-02-24},
  eprint      = {2002.10143v1},
  eprintclass = {cs.AR},
  eprinttype  = {arXiv},
  file        = {:http\://arxiv.org/pdf/2002.10143v1:PDF},
  keywords    = {cs.AR},
}

@Article{VHDL2009,
  journal = {IEEE Std 1076-2008 (Revision of IEEE Std 1076-2002)},
  title   = {IEEE Standard VHDL Language Reference Manual},
  year    = {2009},
  pages   = {1-640},
}

@Article{SV2018,
  journal = {IEEE Std 1800-2017 (Revision of IEEE Std 1800-2012)},
  title   = {IEEE Standard for SystemVerilog--Unified Hardware Design, Specification, and Verification Language},
  year    = {2018},
  pages   = {1-1315},
}

@Misc{llhd.io,
  author       = {Fabian Schuiki},
  howpublished = {\url{http://llhd.io}},
  note         = {[Online; accessed 31-August-2020]},
  title        = {LLHD},
  year         = {[Online; accessed 31-August-2020]},
}

@Misc{moore,
  author       = {Fabian Schuiki},
  howpublished = {\url{https://github.com/fabianschuiki/moore}},
  title        = {Moore},
  year         = {[Online; accessed 31-August-2020]},
}

@Misc{llhd-sim,
  author       = {Fabian Schuiki},
  howpublished = {\url{https://github.com/fabianschuiki/llhd-sim}},
  title        = {LLHD-Sim},
  year         = {[Online; accessed 31-August-2020]},
}

@Misc{tablegen,
  howpublished = {\url{https://llvm.org/docs/TableGen/}},
  title        = {TableGen},
  year         = {[Online; accessed 31-August-2020]},
}

@Misc{gtkwave,
  howpublished = {\url{http://gtkwave.sourceforge.net/}},
  title        = {GTKWave},
  year         = {[Online; accessed 31-August-2020]},
}

@Misc{vcddiff,
  author       = {Palmer Dabbelt},
  howpublished = {\url{https://github.com/palmer-dabbelt/vcddiff}},
  title        = {vcddiff},
  year         = {[Online; accessed 31-August-2020]},
}

@Misc{vivado,
  howpublished = {\url{https://www.xilinx.com/products/design-tools/vivado.html}},
  title        = {Xilinx Vivado},
  year         = {[Online; accessed 31-August-2020]},
}

@Misc{Neuendorffer,
  author       = {Stephen Neuendorffer},
  howpublished = {\url{https://github.com/llvm/circt/blob/master/docs/Charter.md}},
  title        = {CIRCT Charter},
  year         = {[Online; accessed 10-September-2020]},
}
@inproceedings{Sutherland2006APF,
  title={A Proposal for a Standard Synthesizable Subset for SystemVerilog-2005: What the IEEE Failed to Define},
  author={S. Sutherland},
  year={2006}
}
@Misc{Bosio2008,
  author = {Alberto Bosio and Giorgio Di Natale},
  title  = {LIFTING: A Flexible Open-Source Fault Simulator},
  year   = {2008},
  doi    = {10.1109/ats.2008.17},
}

@Article{Meyer2016,
  author      = {Steven Meyer},
  title       = {CVC Verilog Compiler -- Fast Complex Language Compilers Can be Simple},
  abstract    = {This paper explains how to develop Verilog hardware description language (HDL) optimized flow graph compiled simulators. It is claimed that the methods and algorithms described here can be applied in the development of flow graph compilers for other complex computer languages. The method uses the von Neumann computer architecture (MRAM model) as the best abstract model of computation and uses comparison and selection of alternative machine code sequences to utilize modern processor low level parallelism. By using the anti formalist method described here, the fastest available full IEEE 1364 2005 Verilog HDL standard simulators has been developed. The compiler only required 95,000 lines of C code and two developers. This paper explains how such a compiled simulator validates the anti-formalism computer science methodology best expressed by Peter Naur's datalogy and provides specific guidelines for applying the method. Development history from a slow interpreter into a fast flow graph based machine code compiled simulator is described. The failure of initial efforts that tried to convert a full 1364 compliant interpreter into interpreted execution of possibly auto generated virtual machines is discussed. The argument that fast Verilog simulation requires detail removing abstraction is shown to be incorrect. Reasons parallel GPU Verilog simulation has not succeeded are given.},
  date        = {2016-03-26},
  eprint      = {1603.08059},
  eprintclass = {cs.PL},
  eprinttype  = {arXiv},
  file        = {:http\://arxiv.org/pdf/1603.08059v2:PDF},
  keywords    = {cs.PL, D.3.4; B.6.3},
}

@InProceedings{Grossman2013,
  author          = {J.P. Grossman and Brian Towles and Joseph A. Bank and David E. Shaw},
  title           = {The role of Cascade, a cycle-based simulation infrastructure, in designing the Anton special-purpose supercomputers},
  year            = {2013},
  pages           = {1--9},
  publisher       = {IEEE},
  abstract        = {Cascade is a cycle-based C++ simulation infrastructure used in the design and verification of two successive versions of Anton, a specialized machine designed for high-speed molecular dynamics computation. Cascade was engineered to address the size and speed challenges inherent in simulating massively parallel special-purpose machines. It provides a lightweight programming interface, rich debugging support, tight Verilog integration, fast multithreaded execution, and low memory overhead. Here, we describe the core features of Cascade that proved most valuable for our simulation efforts.},
  date            = {29 May-7 June 2013},
  doi             = {10.1145/2463209.2488884},
  eventdate       = {29 May-7 June 2013},
  eventtitleaddon = {Austin, TX},
  file            = {:https\://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=6560715:PDF},
  isbn            = {978-1-4503-2071-9},
  issn            = {0738-100X},
  journaltitle    = {2013 50th ACM/EDAC/IEEE Design Automation Conference (DAC)},
  keywords        = {Ports (Computers), Registers, Clocks, Hardware design languages, Reflection, Hardware, Debugging, Cascade, Anton, cycle-based simulation, reflection},
  location        = {Austin, TX},
}

@Misc{verilator,
  howpublished = {\url{https://www.veripool.org/wiki/verilator}},
  title        = {Verilator},
  year         = {[Online; accessed 12-Semptember-2020]},
}

@Misc{systemc,
  howpublished = {\url{https://www.accellera.org/downloads/standards/systemc}},
  title        = {SystemC},
  year         = {[Online; accessed 14-September-2020]},
}

@Misc{icarus,
  author       = {Stephen Williams},
  howpublished = {\url{http://iverilog.icarus.com}},
  title        = {Icarus Verilog},
  year         = {[Online; accessed 14-September-2020]},
}

@Article{V2006,
  title        = {IEEE Standard for Verilog Hardware Description Language},
  year         = {2006},
  pages        = {1--590},
  abstract     = {The Verilog hardware description language (HDL) is defined in this standard. Verilog HDL is a formal notation intended for use in all phases of the creation of electronic systems. Because it is both machine-readable and human-readable, it supports the development, verification, synthesis, and testing of hardware designs; the communication of hardware design data; and the maintenance, modification, and procurement of hardware. The primary audiences for this standard are the implementers of tools supporting the language and advanced users of the language.},
  date         = {7 April 2006},
  doi          = {10.1109/IEEESTD.2006.99495},
  file         = {:https\://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=1620780:PDF},
  isbn         = {978-0-7381-4851-9},
  journaltitle = {IEEE Std 1364-2005 (Revision of IEEE Std 1364-2001)},
  keywords     = {Hardware design languages, IEEE Standards, Hardware, Patents, Solid modeling, computer, computer languages, digital systems, electronic systems, hardware, hardware description languages, hardware design, HDL, PLI, programming language interface, Verilog, Verilog HDL, Verilog P},
  publisher    = {IEEE},
}

@Misc{vcdvcd,
  author       = {Ciro Santilli},
  howpublished = {\url{https://github.com/cirosantilli/vcdvcd}},
  title        = {vcdvcd},
  year         = {[Online; accessed 15-September-2020]},
}

@Misc{circt,
  howpublished = {\url{https://github.com/llvm/circt}},
  title        = {CIRCT},
  year         = {[Online; accessed 16-September-2020]},
}

@Misc{mlir,
  howpublished = {\url{https://mlir.llvm.org}},
  title        = {MLIR},
  year         = {[Online; accessed 17-September-2020]},
}

@Comment{jabref-meta: databaseType:bibtex;}

@Comment{jabref-meta: grouping:
0 AllEntriesGroup:;
1 StaticGroup:IR\;0\;1\;0x8a8a8aff\;\;\;;
1 StaticGroup:Simulation\;0\;1\;0x8a8a8aff\;\;\;;
}
